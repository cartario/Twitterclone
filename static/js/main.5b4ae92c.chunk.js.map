{"version":3,"sources":["signin.jsx","App.js","serviceWorker.js","theme.js","index.js"],"names":["useStyles","makeStyles","theme","wrapper","display","height","border","blueSide","position","flex","justifyContent","alignItems","backgroundColor","overflow","blueSideList","margin","padding","listStyle","color","blueSideListIcon","marginRight","blueSideBigIcon","top","left","width","transform","loginSide","loginSideWrapper","maxWidth","button","boxSizing","borderRadius","props","classes","className","Typography","variant","style","textAlign","Button","fullWidth","App","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","main","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAQMA,EAAYC,aAAW,SAACC,GAAD,MAAU,CACrCC,QAAS,CAEPC,QAAQ,OACRC,OAAO,QACPC,OAAO,kBAETC,SAAU,CACRC,SAAS,WACTC,KAAK,UACLL,QAAQ,OACRM,eAAe,SACfC,WAAW,SACXC,gBAAgB,UAChBC,SAAS,UAEXC,aAAc,CACZN,SAAS,WACTO,OAAQ,EACRC,QAAS,EACTC,UAAU,OACV,OAAQ,CACNC,MAAM,QACNd,QAAQ,OACRM,eAAe,SACfC,WAAW,WAGfQ,iBAAkB,CAEhBC,YAAa,IAEfC,gBAAiB,CACfb,SAAS,WACTc,IAAI,MACJC,KAAK,MACLC,MAAM,OACNnB,OAAO,OACPoB,UAAU,yBAGZC,UAAW,CACTtB,QAAQ,OACRM,eAAe,SACfC,WAAW,SACXF,KAAK,UACLG,gBAAgB,SAGlBe,iBAAkB,CAChBC,SAAS,OAGXC,OAAQ,CACNd,OAAO,WACPe,UAAU,aACVC,aAAa,YAIF,WAACC,GACd,IAAMC,EAAUjC,IAChB,OACE,yBAAKkC,UAAWD,EAAQ9B,SACtB,6BAAS+B,UAAWD,EAAQ1B,UAC1B,kBAAC,IAAD,CAAa2B,UAAWD,EAAQZ,gBAAiBH,MAAM,cACvD,wBAAIgB,UAAWD,EAAQnB,cACrB,4BACE,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAClB,kBAAC,IAAD,CAAoBF,UAAWD,EAAQd,mBADzC,WAKF,4BACE,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,MAClB,kBAAC,IAAD,CAAuBF,UAAWD,EAAQd,mBAD5C,WAKF,4BACE,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,MACpB,kBAAC,IAAD,CAA+BF,UAAWD,EAAQd,mBADlD,aAMN,6BAASe,UAAWD,EAAQP,WAC1B,yBAAKQ,UAAWD,EAAQN,iBAAkBU,MAAO,CAACC,UAAU,SAC1D,kBAAC,IAAD,CAAapB,MAAM,YACnB,kBAACiB,EAAA,EAAD,CAAYC,QAAQ,MAApB,SACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,2CACA,kBAACG,EAAA,EAAD,CAAQC,WAAS,EAACN,UAAWD,EAAQJ,OAAQX,MAAM,UAAUkB,QAAQ,aAArE,SACA,kBAACG,EAAA,EAAD,CAAQC,WAAS,EAACN,UAAWD,EAAQJ,OAAQX,MAAM,UAAUkB,QAAQ,YAArE,aCtFKK,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCGcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCdO5C,EAAQ6C,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,KAAK,WAEPC,UAAW,CACTD,KAAK,cCFXE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAerD,MAAOA,GACpB,kBAAC,EAAD,QAGJsD,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5b4ae92c.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles, Typography} from '@material-ui/core';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\nimport PeopleAltOutlinedIcon from '@material-ui/icons/PeopleAltOutlined';\nimport ChatBubbleOutlineOutlinedIcon from '@material-ui/icons/ChatBubbleOutlineOutlined';\n\nconst useStyles = makeStyles((theme)=>({\n  wrapper: {\n    \n    display: `flex`,\n    height: `100vh`,\n    border: `1px solid grey`,\n  },\n  blueSide: {\n    position: `relative`,\n    flex: `0 0 50%`,\n    display: `flex`,\n    justifyContent: `center`,\n    alignItems: `center`,\n    backgroundColor: `#1DA1F2`,\n    overflow: `hidden`,\n  },\n  blueSideList: {\n    position: `relative`,\n    margin: 0,\n    padding: 0,\n    listStyle: `none`,\n    '& h6': {\n      color: `white`,\n      display: `flex`,\n      justifyContent: `center`,\n      alignItems: `center`,\n    },\n  },\n  blueSideListIcon: {\n    \n    marginRight: 10,\n  },\n  blueSideBigIcon: {\n    position: `absolute`,\n    top: `35%`,\n    left: `45%`,\n    width: `250%`,\n    height: `250%`,\n    transform: `translate(-50%, -50%)`,\n\n  },\n  loginSide: {\n    display: `flex`,\n    justifyContent: `center`,\n    alignItems: `center`,\n    flex: `0 0 50%`,\n    backgroundColor: `white`,\n    \n  }, \n  loginSideWrapper: {\n    maxWidth: `80%`,\n    \n  }, \n  button: {    \n    margin: `5px auto`,\n    boxSizing: `border-box`,\n    borderRadius: `25px`, \n  },\n}));\n\nexport default (props)=> {\n  const classes = useStyles();\n  return (\n    <div className={classes.wrapper}>\n      <section className={classes.blueSide}>\n        <TwitterIcon className={classes.blueSideBigIcon} color=\"secondary\"/>  \n        <ul className={classes.blueSideList}>\n          <li>\n            <Typography variant=\"h6\">\n              <SearchOutlinedIcon className={classes.blueSideListIcon}/>\n              point1\n            </Typography>\n          </li>\n          <li>\n            <Typography variant=\"h6\">\n              <PeopleAltOutlinedIcon className={classes.blueSideListIcon}/>\n              point2\n            </Typography>\n          </li>\n          <li>\n            <Typography variant=\"h6\">\n            <ChatBubbleOutlineOutlinedIcon className={classes.blueSideListIcon}/>\n            point3</Typography>\n          </li>\n        </ul>\n      </section>\n      <section className={classes.loginSide}>\n        <div className={classes.loginSideWrapper} style={{textAlign: `left`}}>          \n          <TwitterIcon color=\"primary\"/>          \n          <Typography variant=\"h3\">Title</Typography>\n          <Typography variant=\"h4\">SmallSmaller titleSmaller titleer title</Typography>\n          <Button fullWidth className={classes.button} color=\"primary\" variant=\"contained\">Hello</Button>\n          <Button fullWidth className={classes.button} color=\"primary\" variant=\"outlined\">Hello</Button>\n        </div>\n      </section>      \n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport SignIn from './signin';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SignIn/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: `#1DA1F2`,\n    },\n    secondary: {\n      main: `#039be5`,\n    },\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport {theme} from './theme.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}